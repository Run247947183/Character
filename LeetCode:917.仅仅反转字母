class Solution {
    public String reverseOnlyLetters(String S) {
        // 双指针法
        int left = 0;
        int right = S.length() - 1;
        char[] chars = S.toCharArray();
        // count 记录字符串中有多少个字母
        int count = 0;
        for (int i = 0; i < chars.length; i++) {
            if (!isCharacter(chars, i)) {
                count++;
            }
        }
        // 能够反转的字母组数
        count = count / 2;
        // 记录已经反转的组数
        if (count == 0) {
            return new String(chars);
        }
        int tmp = 0;
        while (left < right && tmp < count) {
            while (isCharacter(chars, left) && left < right) {
                left++;
            }
            while (isCharacter(chars, right) && right > left) {
                right--;
            }
            swap(chars, left, right);
            left++;
            right--;
            tmp++;
        }
        return new String(chars);
    }
    // 判断是否是字母
    public boolean isCharacter(char[] s, int pos) {
        if (s[pos] < 'A' || (s[pos] > 'Z' && s[pos] < 'a')
            || s[pos] > 'z') {
            return true;
        }
        return false;
    }
    // 转换两个字母
    public void swap(char[] chars, int x, int y) {
        char tmp = chars[x];
        chars[x] = chars[y];
        chars[y] = tmp;
    }
}

// 方法二：
class Solution {
    public String reverseOnlyLetters(String S) {
        if (S.length() < 2) {
            return S;
        }
        StringBuilder sb = new StringBuilder();
        Map<Integer, Character> map = new HashMap<>();
        for (int i = 0; i < S.length(); i++) {
            if (!is_letter(S.charAt(i))) {
                map.put(i, S.charAt(i));
            } else {
                sb.append(S.charAt(i));
            }
        }
        String str = sb.toString();
        char[] chars = str.toCharArray();
        int left = 0;
        int right = str.length() - 1;
        while (left < right) {
            char tmp = chars[left];
            chars[left] = chars[right];
            chars[right] = tmp;
            left++;
            right--;
        }
        StringBuilder sb2 = new StringBuilder();
        int k = 0;
        for (int j = 0; j < S.length(); j++) {
            if (map.containsKey(j)) {
                sb2.append(map.get(j));
            } else {
                sb2.append(chars[k++]);
            }
        }
        return sb2.toString();
    }
    public boolean is_letter(char c) {
        if (c < 'A' || (c > 'Z' && c < 'a') || c > 'z') {
            return false;
        }
        return true;
    }
}
